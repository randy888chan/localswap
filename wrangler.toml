name = "dex-aggregator"
compatibility_date = "2024-03-20"
main = "src/server.ts"
usage_model = "bundled"

kv_namespaces = [
  { binding = "TX_QUEUE", id = "<QUEUE_NAMESPACE_ID>" },
  { binding = "P2P_OFFERS", id = "<P2P_OFFERS_ID>" },
  { binding = "TRANSLATION_CACHE", id = "<TRANSLATION_CACHE_ID>" }
]

[ai]
bindings = [
  { name = "AI", type = "ai" }
]

[build]
command = "npm run build && wrangler types"

[vars]
ENVIRONMENT = "production"
LCS_API_KEY = "@lcs_api_key"
KV_ENCRYPTION_KEY = "@kv_encryption_key"
BTC_PRIVATE_KEY = "@btc_key::2"
ETH_SIGNER_KEY = "@eth_signer::3"
RANGO_API_KEY = "@rango_prod_key"
BTC_SIGNER_KEY = "@btc_signer_v2"
ETH_SIGNER_KEY = "@eth_signer_v2"
PARTICLE_PROJECT_ID = "@particle_project_id"
PARTICLE_CLIENT_KEY = "@particle_client_key"
PARTICLE_APP_ID = "@particle_app_id"

[durable_objects]
bindings = [
  { name = "RANGO_QUEUE", class_name = "RangoQueueDO" }
]

[[migrations]]
tag = "v1"
new_classes = ["RangoQueueDO"]

[analytics_engine_datasets]
RANGO_METRICS = { dataset = "rango_metrics" }

[triggers]
crons = ["0 * * * *"]  # Hourly queue flush

[deployment]
environments = [
  { name = "staging",   vars = { ENVIRONMENT = "staging" }},
  { name = "production",vars = { ENVIRONMENT = "production" }}
]

[env.staging]
route = "staging.swap.example.com/*"

[env.production] 
route = "swap.example.com/*"

[[unsafe.bindings]]
name = "LOW_LATENCY_MODE"
type = "json"
value = { 
  "edge_preference": "smart_routing", 
  "backup_regions": ["arn", "cdg", "hkg"],
  "tunnel_ports": [8545, 8546],
  "blockchain_sync": "optimistic"
}
